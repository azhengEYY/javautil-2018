-
  name: etl_sale_update
  sql: >
    update etl_sale
    set product_id = (
        select  product_id
        from    product
        where   product.case_gtin = etl_sale.case_gtin
                or product.mfr_product_id = etl_sale.mfr_product_id)
    where   etl_file_id = :ETL_FILE_ID
            and
            product_id is null
         and exists
    (
        select 'x' from product
        where   product.case_gtin = etl_sale.case_gtin
                or product.mfr_product_id = etl_sale.mfr_product_id
    )
  descr: >
    Assign product id based on mfr_product_id or 
    GTIT will blow up if two products match
-
  name: product_nomen_insert
  sql: >
      insert into product_nomen(
          product_nomen_id,
          org_id,
          product_ref_cd,
          descr,
          case_gtin
      ) 
      with data as 
      (
         select distinct
          ef.rpt_org_id,
          es.distrib_product_ref,
          es.product_descr,
          es.case_gtin
      from etl_sale es,
           etl_file ef
      where
          ef.etl_file_id = es.etl_file_id
          and ef.etl_file_id = 1
      minus
      select org_id, product_ref_cd, descr, case_gtin from product_nomen
      )
      select 
            product_nomen_id_seq.nextval,
            rpt_org_id,
            distrib_product_ref,
            product_descr,
            case_gtin
      from data

  descr: >
    populate product nomen
    There could be duplicate references if
-
  name: post_sale_insert
  sql: >
     insert into post_sale (  
       etl_sale_id,   org_distrib_id, org_mfr_id, 
       product_id,    distributor_customer_id,item_qty,
       case_equiv_qty, inv_amt,inv_dt)
     select
        s.etl_sale_id, s.org_distrib_id, s.org_mfr_id,
        s.product_id, s.distributor_customer_id, 
        s.cases_shipped * p.units_per_case + 
        s.boxes_shipped * p.units_per_box +
        s.units_shipped,
        (s.cases_shipped * p.units_per_case + 
        s.boxes_shipped  * p.units_per_box +
        s.units_shipped ) / p.units_per_case,
        s.extended_net_amt, invoice_dt
     from etl_sale s,
         product p
     where
        s.product_id =  p.product_id and 
        s.etl_sale_id is not null
        and s.org_distrib_id is not null
        and s.org_mfr_id is not null
        and s.product_id is not null
        and s.distributor_customer_id is not null
        and s.etl_file_id = :ETL_FILE_ID
        and not exists (
            select 'x'
            from post_sale p
            where p.etl_sale_id = s.etl_sale_id
        )
-
  name: effective_date_select
  sql: >
    select max(ship_dt) max_ship_dt, max(invoice_dt) max_invoice_dt
    from etl_sale
    where etl_file_id = :ETL_FILE_ID
    
